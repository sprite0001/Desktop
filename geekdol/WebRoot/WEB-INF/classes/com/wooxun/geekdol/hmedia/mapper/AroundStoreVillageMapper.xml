<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wooxun.geekdol.hmedia.mapper.AroundStoreVillageMapper" >
  <resultMap id="BaseResultMap" type="com.wooxun.geekdol.hmedia.model.AroundStoreVillage" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="around_store_id" property="aroundStoreId" jdbcType="BIGINT" />
    <result column="village_id" property="villageId" jdbcType="BIGINT" />
    <association property="village" column="village_id" select="com.wooxun.geekdol.system.mapper.VillageMapper.selectByPrimaryKey"></association>
  </resultMap>
  <sql id="Base_Column_List" >
    id, around_store_id, village_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from m_around_store_village
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from m_around_store_village
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.wooxun.geekdol.hmedia.model.AroundStoreVillage" useGeneratedKeys="true" keyProperty="id" >
    insert into m_around_store_village (id, around_store_id, village_id
      )
    values (#{id,jdbcType=BIGINT}, #{aroundStoreId,jdbcType=BIGINT}, #{villageId,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.wooxun.geekdol.hmedia.model.AroundStoreVillage" useGeneratedKeys="true" keyProperty="id" >
    insert into m_around_store_village
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="aroundStoreId != null" >
        around_store_id,
      </if>
      <if test="villageId != null" >
        village_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="aroundStoreId != null" >
        #{aroundStoreId,jdbcType=BIGINT},
      </if>
      <if test="villageId != null" >
        #{villageId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.wooxun.geekdol.hmedia.model.AroundStoreVillage" >
    update m_around_store_village
    <set >
      <if test="arundStoreId != null" >
        around_store_id = #{arundStoreId,jdbcType=BIGINT},
      </if>
      <if test="villageId != null" >
        village_id = #{villageId,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
      and upd_eac =  ( #{updEac,jdbcType=BIGINT} -1) 
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wooxun.geekdol.hmedia.model.AroundStoreVillage" >
    update m_around_store_village
    set around_store_id = #{storeId,jdbcType=BIGINT},
      village_id = #{villageId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
      and upd_eac =  ( #{updEac,jdbcType=BIGINT} -1) 
  </update>
  <!-- 根据周边店id查找小区 -->
  <select id="selectAroundStoreVillageByAroundStoreId" parameterType="java.lang.Long" resultMap="BaseResultMap">
  	select
  	<include refid="Base_Column_List" />
    from m_around_store_village
    where around_store_id = #{id,jdbcType=BIGINT}
  </select>
  <!-- 修改周边店时,根据店id删除关系表所有相关的数据 -->
  <delete id="deleteByAroundStoreId" parameterType="java.lang.Long">
    delete from m_around_store_village
    where around_store_id = #{aroundStoreId,jdbcType=BIGINT}
  </delete>
  
  <!-- 批量插入周边店与小区关系 -->
  <insert id="insertBatch" parameterType="map">
	insert into m_around_store_village(around_store_id, village_id)
	values
	<foreach collection="villageIds" item="item" index="index" separator="," >
		( #{id,jdbcType=BIGINT}, #{item})
	</foreach>
  </insert>
  
  <!-- 查找周边店和小区的对应关系 -->
  <select id="selectAroundStoreVillageByVillage" resultMap="BaseResultMap" parameterType="java.util.List" >
    select 
    <include refid="Base_Column_List" />
    from m_around_store_village
    where village_id in 
    <foreach item="item" index="index" collection="list" 
             open="(" separator="," close=")">
            #{item.villageId}
    </foreach>
  </select>
  
  <!-- 查找周边店和小区的对应关系 -->
  <select id="selectAroundStoreVillageByVillageId" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from m_around_store_village
    where village_id = #{villageId,jdbcType=BIGINT}
  </select>
</mapper>